# required
NDEBUG=-DNDEBUG
NASM=./tool/nasm-2.11.06/nasm.exe
ASMFLAGS=-f elf32
CC=./tool/toolchain32/bin/i686-linux-gnu-gcc.exe
CFLAGS=-freg-struct-return -march=i586 -Wall -Wextra -Werror -Wshadow -Wstrict-prototypes -Wmissing-prototypes -fno-builtin -O0 -Isrc\kernel
LD=./tool/toolchain32/bin/i686-linux-gnu-ld.exe
LDFLAGS=--strip-debug
LIBGCC=$(shell $(CC) $(CFLAGS) -print-libgcc-file-name)
BFI=./tool/bfi10/bfi.exe

# optional
# virtual machine
QEMU=./tool/qemu/
QEMU_IMG=$(QEMU)/qemu-img.exe
QEMU_I386=$(QEMU)/qemu-system-i386w.exe -L $(QEMU)/Bios -cpu pentium
BOCHS=./tool/bochs-p4-smp-2.6.7-win32
BOCHS_SMP=$(BOCHS)/bochsdbg-p4-smp.exe
VIRTUALBOX=C:\Program Files\Oracle\VirtualBox\VBoxManage.exe

# disk image
MKDOSFS=./tool/mkdosfs/mkdosfs.exe

#directory
BUILD_DIR=build
SRC_DIR=src
RESOURCE_DIR=src\resource
RESOURCE_OBJ_DIR=src\resource_obj
INCLUDE_DIR=src
CURRENT_DIR=$(shell echo %cd%)

# source
ASM_SRC=$(shell dir /A-D /B /S $(SRC_DIR)\kernel\*.asm)
C_SRC=$(shell dir /A-D /B /S $(SRC_DIR)\kernel\*.c)
RESOURCE_SRC=$(shell dir /A-D /B /S $(RESOURCE_DIR)\*)

ASM_OBJ=$(patsubst $(CURRENT_DIR)\\%.asm,%.o,$(ASM_SRC))
C_OBJ=$(patsubst $(CURRENT_DIR)\\%.c,%.o,$(C_SRC))
RESOURCE_OBJ=$(patsubst $(CURRENT_DIR)\$(RESOURCE_DIR)\\%,$(RESOURCE_OBJ_DIR)\\%.o,$(RESOURCE_SRC))
OBJ=$(C_OBJ) $(ASM_OBJ) $(RESOURCE_OBJ)

BOOTLOADER_ASM=$(SRC_DIR)\bootloader\floppyloader.asm

all: os3.img

os3.img: floppyloader.bin $(BUILD_DIR)/kernel.bin
	$(BFI) -t=6 -b=$< -f=$@ $(BUILD_DIR)

floppyloader.bin: $(BOOTLOADER_ASM)
	$(NASM) $< -o $@

$(BUILD_DIR)/kernel.bin: $(OBJ)
	$(LD) $(LDFLAGS) -T kernel.ld -o kernel.o $(OBJ) $(LIBGCC)
	objcopy -O binary kernel.o $(BUILD_DIR)/kernel.bin

.SUFFIXES: .o .asm
.asm.o:
	$(NASM) $(ASMFLAGS) $< -o $@

.SUFFIXES: .o .c
.c.o:
	$(CC) $(CFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

$(RESOURCE_OBJ): $(RESOURCE_OBJ_DIR)\\%.o: $(RESOURCE_DIR)\\%
	cd $(RESOURCE_DIR) & objcopy --binary-architecture=i386 -I binary -O elf32-i386 $* $(CURRENT_DIR)\$@

clean:
	del floppyloader.bin os3.img $(BUILD_DIR)\kernel.bin kernel.o kernel.elf $(OBJ)

run: runqemu

runbochs: os3.img
	$(BOCHS_SMP) -q -f $(BOCHS)/bochsrc.bxrc

QEMU_TEST_SATA=-drive file=freedos.qcow,if=none,id=testdisk -device ich9-ahci,id=ahci -device ide-drive,drive=testdisk,bus=ahci.0
QEMU_TEST_SATA2=-drive file=empty.raw,if=none,id=testdisk2 -device ide-drive,drive=testdisk2,bus=ahci.1
runqemu: os3.img
	$(QEMU_I386) -smp cpus=3,cores=1,threads=1 -m 128 $(QEMU_TEST_SATA) $(QEMU_TEST_SATA2) -fda os3.img -boot order=a

runvbox: os3.img
	$(VIRTUALBOX) startvm HomemadeOS3 --type gui

disk:
	$(QEMU_IMG) create -f raw empty.raw 40M
	$(MKDOSFS) -v -F 32 empty.raw
