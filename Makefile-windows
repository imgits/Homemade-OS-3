# required
NDEBUG=-DNDEBUG
NASM=./tool/nasm-2.11.06/nasm.exe
CC=gcc.exe
CFLAGS=-m32 -march=i586 -Wall -Wextra -Werror -Wshadow -Wstrict-prototypes -Wmissing-prototypes -fno-builtin -O0 -Isrc\kernel
LD=ld
LIBGCC=$(shell $(CC) $(CFLAGS) -print-libgcc-file-name)
BFI=./tool/bfi10/bfi.exe

# optional
# virtual machine
QEMU=./tool/qemu/
QEMU_IMG=$(QEMU)/qemu-img.exe
QEMU_I386=$(QEMU)/qemu-system-i386w.exe -L $(QEMU)/Bios -cpu pentium
BOCHS=./tool/bochs-p4-smp-2.6.7-win32
BOCHS_SMP=$(BOCHS)/bochsdbg-p4-smp.exe
VIRTUALBOX=C:\Program Files\Oracle\VirtualBox\VBoxManage.exe

# disk image
MKDOSFS=./tool/mkdosfs/mkdosfs.exe

# source
KERNEL_SRC=src\kernel
ASM_SRC=$(shell dir /A-D /B /S $(KERNEL_SRC)\*.asm)
C_SRC=$(shell dir /A-D /B /S $(KERNEL_SRC)\*.c)
ASM_OBJ=$(ASM_SRC:.asm=.o)
C_OBJ=$(C_SRC:.c=.o)
OBJ=$(C_OBJ) $(ASM_OBJ)
BOOTLOADER_ASM=src\bootloader\floppyloader.asm

all: os3.img

os3.img: floppyloader.bin build/kernel.bin
	$(BFI) -t=6 -b=$< -f=$@ build

floppyloader.bin: $(BOOTLOADER_ASM)
	$(NASM) $< -o $@

build/kernel.bin: $(OBJ)
	$(LD) -m i386pe -T kernel.ld -o kernel.o $(OBJ) $(LIBGCC)
	objcopy -O elf32-i386 --change-section-lma .text-0xf0000000 --change-section-lma .rdata-0xf0000000 --change-section-lma .data-0xf0000000 --change-section-lma .drectve-0xf0000000 --change-section-lma .bss-0xf0000000 kernel.o kernel.elf
	objcopy -O binary kernel.elf build/kernel.bin

.SUFFIXES: .o .asm
.asm.o:
	$(NASM) -f elf32 $< -o $@

.SUFFIXES: .o .c
.c.o:
	$(CC) $(CFLAGS) -I$(KERNEL_SRC) -c $< -o $@

clean:
	del floppyloader.bin os3.img build\kernel.bin kernel.o kernel.elf $(OBJ)

run: runqemu

runbochs: os3.img
	$(BOCHS_SMP) -q -f $(BOCHS)/bochsrc.bxrc

QEMU_TEST_SATA=-drive file=freedos.qcow,if=none,id=testdisk -device ich9-ahci,id=ahci -device ide-drive,drive=testdisk,bus=ahci.0
QEMU_TEST_SATA2=-drive file=empty.raw,if=none,id=testdisk2 -device ide-drive,drive=testdisk2,bus=ahci.1
runqemu: os3.img
	$(QEMU_I386) -smp cpus=3,cores=1,threads=1 -m 128 $(QEMU_TEST_SATA) $(QEMU_TEST_SATA2) -fda os3.img -boot order=a

runvbox: os3.img
	$(VIRTUALBOX) startvm HomemadeOS3 --type gui

disk:
	$(QEMU_IMG) create -f raw empty.raw 40M
	$(MKDOSFS) -v -F 32 empty.raw
