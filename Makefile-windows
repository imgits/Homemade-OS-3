# required
NDEBUG=-DNDEBUG
NASM=./tool/nasm-2.11.06/nasm.exe
CC=gcc.exe
CFLAGS=-m32 -march=i586 -Wall -Wextra -Werror -Wshadow -Wstrict-prototypes -Wmissing-prototypes -fno-builtin -Isrc -O0
LD=ld
#./tool/i686-pc-linux-gnu/ld.exe
LDFLAGS=--oformat elf32-i386
BFI=./tool/bfi10/bfi.exe

# optional
QEMU=./tool/Qemu-windows-2.2.0
#QEMU_IMG=$(QEMU)/qemu-img.exe
QEMU_I386=$(QEMU)/qemu-system-i386w.exe -L $(QEMU)/Bios -cpu pentium
BOCHS=./tool/bochs-p4-smp-2.6.7-win32
BOCHS_SMP=$(BOCHS)/bochsdbg-p4-smp.exe
VIRTUALBOX=C:\Program Files\Oracle\VirtualBox\VBoxManage.exe

# source
ASM_SRC=src\interrupt\interruptentry.asm src\assembly\assembly.asm src\main\entry.asm src\task\taskswitch.asm src\io\virtual8086.asm
C_SRC=$(shell dir /A-D /B /S src\*.c)
C_OBJ=$(C_SRC:.c=.o)
ASM_OBJ=$(ASM_SRC:.asm=.o)
OBJ=$(C_OBJ) $(ASM_OBJ)
BOOTLOADER_SRC=.\src\bootloader\floppyloader.asm

all: os3.img

os3.img: floppyloader.bin build/kernel.bin
	$(BFI) -t=6 -b=$< -f=$@ build

floppyloader.bin: $(BOOTLOADER_SRC)
	$(NASM) $< -o $@

#	objcopy -O elf32-i386 --change-section-vma .text+0xf0000000 --change-section-vma .rdata+0xf0000000 --change-section-vma .data+0xf0000000 --change-section-vma .drectve+0xf0000000 --change-section-vma .bss+0xf0000000 kernel.o kernel.elf
#
build/kernel.bin: $(OBJ)
	$(LD) -m i386pe -T kernel.ld -o kernel.o $(OBJ)
	objcopy -O elf32-i386 --change-section-lma .text-0xf0000000 --change-section-lma .rdata-0xf0000000 --change-section-lma .data-0xf0000000 --change-section-lma .drectve-0xf0000000 --change-section-lma .bss-0xf0000000 kernel.o kernel.elf
	objcopy -O binary kernel.elf build/kernel.bin

.SUFFIXES: .o .asm
.asm.o:
	$(NASM) -f elf32 $< -o $@

clean:
	del floppyloader.bin os3.img build\kernel.bin kernel.o kernel.elf $(OBJ)

run: runqemu

runbochs: os3.img
	$(BOCHS_SMP) -q -f $(BOCHS)/bochsrc.bxrc

runqemu: os3.img
	$(QEMU_I386) -smp cpus=2,cores=2,threads=2 -m 128 -fda os3.img

runvbox: os3.img
	$(VIRTUALBOX) startvm HomemadeOS3 --type gui
